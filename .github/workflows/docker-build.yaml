name: Build-And-Push-Multiarch

on:
  push:
    branches: [main]
    tags: ["v*.*.*"] # gdy będziesz tagował wersje
  pull_request:

env:
  IMAGE_NAME: ghcr.io/${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest

    permissions: # potrzebne do zapisu do ghcr
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      # ──────────────────────────────────────────────────────────────
      # Logowanie do rejestrów
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Login to DockerHub (cache registry)
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DH_USER }}
          password: ${{ secrets.DH_TOKEN }}

      # ──────────────────────────────────────────────────────────────
      # Definiujemy tagi + pełną listę platform
      - name: Extract meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern={{version}}
            type=sha,format=short

      # ──────────────────────────────────────────────────────────────
      # 1. Budowa *pojedynczej* architektury do skanu
      - name: Build – load amd64 for scan
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64 # tylko jedna
          load: true
          tags: ${{ env.IMAGE_NAME }}:scan
          # cache-from / cache-to bez zmian …

      # 2. Skan Trivy
      - name: Scan image with Trivy
        uses: aquasecurity/trivy-action@0.30.0

        with:
          image-ref: ${{ env.IMAGE_NAME }}:scan # tag z poprzedniego kroku
          exit-code: "1"
          severity: "CRITICAL,HIGH"

      # 3. Właściwa budowa i push multi-arch (jak masz)
      - name: Build – push multi-arch to GHCR
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          # cache-from / cache-to bez zmian …
