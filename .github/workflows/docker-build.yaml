name: Build-And-Push-Multiarch

on:
  push:
    branches: [ main ]
    tags:     [ 'v*.*.*' ]   # gdy będziesz tagował wersje
  pull_request:

env:
  IMAGE_NAME: ghcr.io/${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:               # potrzebne do zapisu do ghcr
      contents: read
      packages: write

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Buildx
      id: buildx
      uses: docker/setup-buildx-action@v3
      with:
        install: true

    # ──────────────────────────────────────────────────────────────
    # Logowanie do rejestrów
    - name: Login to GHCR
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_PAT }}

    - name: Login to DockerHub (cache registry)
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DH_USER }}
        password: ${{ secrets.DH_TOKEN }}

    # ──────────────────────────────────────────────────────────────
    # Definiujemy tagi + pełną listę platform
    - name: Extract meta
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ env.IMAGE_NAME }}
        tags: |
          type=raw,value=latest,enable={{is_default_branch}}
          type=semver,pattern={{version}}
          type=sha,format=short

    # ──────────────────────────────────────────────────────────────
    # Budujemy, --load-ujemy lokalnie (do skanu), ale NIE wysyłamy
    - name: Build – load for scan
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        provenance: false               # żeby nie mieszać SBOM-ów przy --load
        load: true
        tags: ${{ steps.meta.outputs.tags }}
        cache-from: type=registry,ref=${{ secrets.DH_USER }}/lab8docker-cache:buildcache
        cache-to:   type=registry,ref=${{ secrets.DH_USER }}/lab8docker-cache:buildcache,mode=max

    # ──────────────────────────────────────────────────────────────
    # Trivy: fail jeśli są HIGH / CRITICAL
    - name: Scan image with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.IMAGE_NAME }}:latest
        exit-code: '1'
        severity: 'CRITICAL,HIGH'

    # ──────────────────────────────────────────────────────────────
    # Ponownie budujemy – tym razem push do GHCR (scan już przeszedł)
    # Buildx wykorzysta cache i zbuduje bardzo szybko.
    - name: Build – push multi-arch to GHCR
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        tags: ${{ steps.meta.outputs.tags }}
        push: true
        cache-from: type=registry,ref=${{ secrets.DH_USER }}/lab8docker-cache:buildcache
        cache-to:   type=registry,ref=${{ secrets.DH_USER }}/lab8docker-cache:buildcache,mode=max
